# Tokens:

- HASH
- LPARENTHESIS
- RPARENTHESIS
- LBRACKET
- RBRACKET
- LBRACE
- RBRACE
- LCARAT
- RCARAT
- COLON
- DOUBLECOLON
- PERIOD
- DOUBLEPERIOD

- EQUALS

- PLUS
- MINUS
- ASTRISK
- SLASH
- DOUBLEASTRISK

- IDENTIFIER(String)

- CHARACTER(char)
- STRING(String)
- INTEGER(i64)
- FLOAT(f64)





# Parser:

parser:
- (statement_global SEMICOLON)*

statement_global:
- IDENTIFIER("extern") IDENTIFIER
- IDENTIFIER("use") IDENTIFIER
- statement

statement:
- init_variable(false)
- {statement_header}* statement_function

statement_header:
- HASH LBRACKET IDENTIFIER RBRACKET

statement_function:
- IDENTIFIER("func") IDENTIFIER
  LPAREN {statement_function_argument {COMMA statement_function_argument}*}? RPAREN COLON type
  LBRACE {expression_base}* RBRACE

statement_function_argument:
- IDENTIFIER COLON type



expression_base:
- (init_variable(true) | expression(true)
  ) SEMICOLON

expression(allow_assign : bool):
- expression_addition(allow_assign)

expression_addition(allow_assign : bool):
- expression_multiplication(allow_assign) {{PLUS | MINUS} expression_multiplication(allow_assign)}*

expression_multiplication(allow_assign : bool):
- expression_power(allow_assign) {{ASTRISK | SLASH} expression_power(allow_assign)}*

expression_power(allow_assign : bool):
- term(allow_assign) {DOUBLEASTRISK term(allow_assign)}*


term(allow_assign : bool):
- atom {term_identifier_modifier}* {term_identifier_action(allow_assign)}?

term_identifier_modifier:
- DOUBLECOLON IDENTIFIER
- PERIOD IDENTIFIER
- LBRACKET expression(false) RBRACKET
- LPARENTHESIS {expression(false) {COMMA expression(false)}}? RPARENTHESIS

term_identifier_action(allow_assign : bool):
- allow_assign == true:
  {PLUS | MINUS | ASTRISK | SLASH | DOUBLEASTRISK}? EQUALS expression(false)


init_variable(allow_mutable : bool):
- allow_mutable == true:
  IDENTIFIER("let") {IDENTIFIER("mut")}* IDENTIFIER {COLON type}? EQUALS expression(false);
- allow_mutable == false:
  IDENTIFIER("let") IDENTIFIER {COLON type}? EQUALS expression(false);


type:
- IDENTIFIER (DOUBLECOLON IDENTIFIER)* {LCARAT {type_argument {COMMA type_argument}*}? RCARAT}?

type_argument:
- literal
- type



atom:
- literal
- INTEGER DOUBLEPERIOD INTEGER
- FLOAT DOUBLEPERIOD FLOAT
- LCARAT {expression(false) {COMMA expression(false)}*}? RCARAT
- LBRACKET {expression(false) {COMMA expression(false)}*}? RBRACKET
- LBRACE {literal COLON expression(false) {COMMA literal COLON expression(false)}*}? RBRACKET

literal:
- IDENTIFIER
- CHARACTER
- STRING
- INTEGER
- FLOAT