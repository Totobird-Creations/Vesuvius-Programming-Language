# Tokens:

- HASH
- LPARENTHESIS
- RPARENTHESIS
- LBRACKET
- RBRACKET
- LBRACE
- RBRACE
- LCARAT
- RCARAT
- COLON
- DOUBLECOLON
- PERIOD

- EQUALS

- PLUS
- MINUS
- ASTRISK
- SLASH
- DOUBLEASTRISK

- IDENTIFIER(String)

- CHAR(char)
- STRING(String)
- INTEGER(i64)
- FLOAT(f64)





# Parser:

parser:
- (statement_global SEMICOLON)*

statement_global:
- IDENTIFIER("extern") IDENTIFIER
- IDENTIFIER("use") IDENTIFIER
- statement

statement:
- {HASH LBRACKET {IDENTIFIER {COMMA IDENTIFIER}*}? RBRACKET SEMICOLON}* statement_visibility (
    statement_constant | statement_function
  )

statement_visibility:
- IDENTIFIER("private")
- IDENTIFIER("public")

statement_constant:
- IDENTIFIER("const") IDENTIFIER {COLON type}? EQUALS literal

statement_function:
- IDENTIFIER("func") IDENTIFIER
  LPAREN {statement_function_argument {COMMA statement_function_argument}*}? RPAREN COLON type
  LBRACE {expression}* RBRACE

statement_function_argument:
- IDENTIFIER COLON type {EQUALS literal}?



expression_base:
- IDENTIFIER("let") {IDENTIFIER("mut")}* IDENTIFIER {COLON type}? EQUALS expression(false);
- expression(true)

expression(allow_assign : bool):
- expression_addition(allow_assign)

expression_addition(allow_assign : bool):
- expression_multiplication(allow_assign) {{PLUS | MINUS} expression_multiplication(allow_assign)}*

expression_multiplication(allow_assign : bool):
- expression_power(allow_assign) {{ASTRISK | SLASH} expression_power(allow_assign)}*

expression_power(allow_assign : bool):
- term(allow_assign) {DOUBLEASTRISK term(allow_assign)}*

term(allow_assign : bool):
- IDENTIFIER {expression_identifier_mod}* {expression_identifier_action(allow_assign)}?
- literal


expression_identifier_mod:
- DOUBLECOLON IDENTIFIER
- PERIOD IDENTIFIER
- LBRACKET expression(false) RBRACKET
- LPARENTHESIS {expression(false) {COMMA expression(false)}}? RPARENTHESIS

expression_identifier_action(allow_assign : bool):
- allow_assign == true:
  {PLUS | MINUS | ASTRISK | SLASH | DOUBLEASTRISK}? EQUALS expression(false)


type:
- IDENTIFIER (DOUBLECOLON IDENTIFIER)* {LCARAT {type_argument {COMMA type_argument}*}? RCARAT}?

type_argument:
- literal
- type

literal:
- IDENTIFIER
- CHAR
- STRING
- INTEGER
- FLOAT
